USE BD_HOTEL
GO

--1*. Listar Clientes(FRONT)
IF OBJECT_ID('SP_LISTARCLIENTES') IS NOT NULL
    DROP PROC SP_LISTARCLIENTES
GO
CREATE PROC SP_LISTARCLIENTES
AS
BEGIN
    SELECT IDE_CLI, NOM_CLI+SPACE(1)+APE_CLI AS NOM_CLI,
			EMAIL, NOM_MET, DNI_CLI
    FROM Clientes C
	Join MetodoPago M on M.IDE_MET=C.IDE_MET
END
GO
--1*. Listar Clientes(BACK)
IF OBJECT_ID('SP_LISTARCLIENTES_O') IS NOT NULL
    DROP PROC SP_LISTARCLIENTES_O
GO
CREATE PROC SP_LISTARCLIENTES_O
AS
BEGIN
    SELECT IDE_CLI, NOM_CLI, APE_CLI, EMAIL, IDE_MET, DNI_CLI
    FROM Clientes
END
GO

--2.Listado de clientes por método de pago(Filtrado)
IF OBJECT_ID('SP_LISTACLIENTESxMETODO') IS NOT NULL 
	DROP PROC SP_LISTACLIENTESxMETODO
GO
CREATE PROC SP_LISTACLIENTESxMETODO(@IDE_MET INT)
AS
	select C.IDE_CLI,C.NOM_CLI+space(1)+C.APE_CLI as NOM_CLI
			,C.EMAIL,M.NOM_MET,C.DNI_CLI
		from Clientes C
		JOIN MetodoPago M ON M.IDE_MET=C.IDE_MET
		WHERE C.IDE_MET=@IDE_MET
GO

--SP_LISTACLIENTESxMETODO '1'

--3. Listar Métodos de Pago(combobox)
IF OBJECT_ID('SP_LISTARMETODO') IS NOT NULL
    DROP PROC SP_LISTARMETODO
GO
CREATE PROC SP_LISTARMETODO
AS
BEGIN
    SELECT IDE_MET, NOM_MET
    FROM MetodoPago
END
GO

--4.Nuevo Cliente (Insertar)
IF OBJECT_ID('SP_NUEVOCLIENTE') IS NOT NULL
    DROP PROC SP_NUEVOCLIENTE
GO
CREATE PROC SP_NUEVOCLIENTE
    @NOM_CLI VARCHAR(40),
    @APE_CLI VARCHAR(40),
    @EMAIL VARCHAR(100),
    @IDE_MET INT,
    @DNI_CLI VARCHAR(20)
AS
BEGIN
    INSERT INTO Clientes(NOM_CLI, APE_CLI, EMAIL, IDE_MET, DNI_CLI)
    VALUES (@NOM_CLI, @APE_CLI, @EMAIL, @IDE_MET, @DNI_CLI)
END
GO

--PRUEBA > SP_NUEVOCLIENTE 'Joaquin', 'Suarez', 'joaquin.suarez@email.com', 1, '60746575';


--5.Actualizar Cliente (Modificar)
IF OBJECT_ID('SP_ACTUALIZARCLIENTE') IS NOT NULL
    DROP PROC SP_ACTUALIZARCLIENTE
GO
CREATE PROC SP_ACTUALIZARCLIENTE
	@IDE_CLI INT,
    @NOM_CLI VARCHAR(40),
    @APE_CLI VARCHAR(40),
    @EMAIL VARCHAR(100),
    @IDE_MET INT,
    @DNI_CLI VARCHAR(20)
AS
BEGIN
    UPDATE Clientes
    SET NOM_CLI = @NOM_CLI,
        APE_CLI = @APE_CLI,
        EMAIL = @EMAIL,
        IDE_MET = @IDE_MET,
        DNI_CLI = @DNI_CLI
    WHERE IDE_CLI = @IDE_CLI
END
GO

--PRUEBA > SP_ACTUALIZARCLIENTE 5,'Carmello', 'velbao', 'carmello@email.com', 1, '65748698';


--6. Eliminar Cliente (Eliminar)
IF OBJECT_ID('SP_ELIMINACLIENTE') IS NOT NULL
	DROP PROC SP_ELIMINACLIENTE
GO
CREATE PROC SP_ELIMINACLIENTE(@IDE_CLI INT)
AS
	DELETE Clientes WHERE IDE_CLI=@IDE_CLI
GO

--PRUEBA > SP_ELIMINACLIENTE '1025'


/*******************************************/
/*******************************************/
--1*. Listar Habitaciones(FRONT)
IF OBJECT_ID('SP_LISTARHABITACIONES') IS NOT NULL
    DROP PROC SP_LISTARHABITACIONES
GO
CREATE PROC SP_LISTARHABITACIONES
AS
BEGIN
    SELECT IDE_HAB,NUM_HAB,NOM_THA,CAP_HAB,PRE_HAB,NOM_EST
    FROM Habitaciones H
	JOIN TipoHabitacion T on T.IDE_THA=H.IDE_THA
	JOIN Estado E on E.IDE_EST=H.IDE_EST
END
GO
--1*. Listar Habitaciones(BACK)
IF OBJECT_ID('SP_LISTARHABITACIONES_O') IS NOT NULL
    DROP PROC SP_LISTARHABITACIONES_O
GO
CREATE PROC SP_LISTARHABITACIONES_O
AS
BEGIN
    SELECT IDE_HAB,NUM_HAB,IDE_THA,CAP_HAB,PRE_HAB,IDE_EST
    FROM Habitaciones
END
GO

--2*.Listado de habitaciones por estado(Filtrado)
IF OBJECT_ID('SP_LISTAHABITACIONESxESTADO') IS NOT NULL 
    DROP PROC SP_LISTAHABITACIONESxESTADO
GO
CREATE PROC SP_LISTAHABITACIONESxESTADO(@IDE_EST INT)
AS
    SELECT H.IDE_HAB, H.NUM_HAB, T.NOM_THA, H.CAP_HAB, H.PRE_HAB, E.NOM_EST
    FROM Habitaciones H
    JOIN Estado E ON E.IDE_EST = H.IDE_EST
    JOIN TipoHabitacion T ON T.IDE_THA = H.IDE_THA
    WHERE H.IDE_EST = @IDE_EST
GO

--SP_LISTAHABITACIONESxESTADO '1'

-- Listado de habitaciones por tipo (Filtrado)
IF OBJECT_ID('SP_LISTAHABITACIONESxTIPO') IS NOT NULL 
    DROP PROC SP_LISTAHABITACIONESxTIPO
GO
CREATE PROC SP_LISTAHABITACIONESxTIPO(@IDE_THA INT)
AS
    SELECT H.IDE_HAB, H.NUM_HAB, T.NOM_THA, H.CAP_HAB, H.PRE_HAB, E.NOM_EST
    FROM Habitaciones H
    JOIN TipoHabitacion T ON T.IDE_THA = H.IDE_THA
    JOIN Estado E ON E.IDE_EST = H.IDE_EST
    WHERE H.IDE_THA = @IDE_THA
GO

--SP_LISTAHABITACIONESxTIPO '2'


--3. Listar Estado(combobox)
IF OBJECT_ID('SP_LISTARESTADO') IS NOT NULL
    DROP PROC SP_LISTARESTADO
GO
CREATE PROC SP_LISTARESTADO
AS
BEGIN
    SELECT IDE_EST, NOM_EST
    FROM Estado
END
GO

--4.Listar Tipo de Habitación(combobox)
IF OBJECT_ID('SP_LISTARTIPO') IS NOT NULL
    DROP PROC SP_LISTARTIPO
GO
CREATE PROC SP_LISTARTIPO
AS
BEGIN
    SELECT IDE_THA, NOM_THA
    FROM TipoHabitacion
END
GO

--5.Nueva Habitación (Insertar)
IF OBJECT_ID('SP_NUEVAHABITACION') IS NOT NULL
    DROP PROC SP_NUEVAHABITACION
GO
CREATE PROC SP_NUEVAHABITACION
    @NUM_HAB VARCHAR(50),
    @IDE_THA INT,
	@CAP_HAB INT,
	@PRE_HAB SMALLMONEY,
    @IDE_EST INT
AS
BEGIN
    INSERT INTO Habitaciones(NUM_HAB, IDE_THA, CAP_HAB, PRE_HAB, IDE_EST)
    VALUES (@NUM_HAB, @IDE_THA, @CAP_HAB, @PRE_HAB, @IDE_EST)
END
GO

--PRUEBA > SP_NUEVAHABITACION '103', '1', 5, 20.4, '1';


--6.Actualizar Habitación (Modificar)
IF OBJECT_ID('SP_ACTUALIZARHABITACION') IS NOT NULL
    DROP PROC SP_ACTUALIZARHABITACION
GO
CREATE PROC SP_ACTUALIZARHABITACION
	@IDE_HAB INT,
    @NUM_HAB VARCHAR(50),
    @IDE_THA INT,
	@CAP_HAB INT,
	@PRE_HAB SMALLMONEY,
    @IDE_EST INT
AS
BEGIN
    UPDATE Habitaciones
    SET NUM_HAB = @NUM_HAB,
        IDE_THA = @IDE_THA,
        CAP_HAB = @CAP_HAB,
        PRE_HAB = @PRE_HAB,
        IDE_EST = @IDE_EST
    WHERE IDE_HAB = @IDE_HAB
END
GO

--PRUEBA > SP_ACTUALIZARHABITACION 7,'103', '3',1,15.6,'2';


--7. Eliminar Habitación (Habitación)
IF OBJECT_ID('SP_ELIMINAHABITACION') IS NOT NULL
	DROP PROC SP_ELIMINAHABITACION
GO
CREATE PROC SP_ELIMINAHABITACION(@IDE_HAB INT)
AS
	DELETE Habitaciones WHERE IDE_HAB=@IDE_HAB
GO

--PRUEBA > SP_ELIMINAHABITACION '7'

/*******************************************/
/*******************************************/
--1*. Listar Registros(FRONT)
IF OBJECT_ID('SP_LISTAREGISTROS') IS NOT NULL
    DROP PROC SP_LISTAREGISTROS
GO
CREATE PROC SP_LISTAREGISTROS
AS
BEGIN
    SELECT IDE_ALQ,NOM_CLI+SPACE(1)+APE_CLI AS NOM_CLI,
			DNI_CLI,NUM_HAB,PRE_HAB,FEN_ALQ,FSA_ALQ
    FROM Alquileres A
	JOIN Clientes C on C.IDE_CLI=A.IDE_CLI
	JOIN Habitaciones H on H.IDE_HAB=A.IDE_HAB
END
GO

--1*. Listar Registros(BACK)
IF OBJECT_ID('SP_LISTAREGISTROS_O') IS NOT NULL
    DROP PROC SP_LISTAREGISTROS_O
GO
CREATE PROC SP_LISTAREGISTROS_O
AS
BEGIN
    SELECT IDE_ALQ,IDE_CLI,IDE_HAB,FEN_ALQ,FSA_ALQ
    FROM Alquileres
END
GO

--2. Listar Clientes(combobox)
IF OBJECT_ID('SP_LISTARCLIENTES_R') IS NOT NULL
    DROP PROC SP_LISTARCLIENTES_R
GO
CREATE PROC SP_LISTARCLIENTES_R
AS
BEGIN
    SELECT IDE_CLI, NOM_CLI+space(1)+APE_CLI as NOM_CLI
    FROM Clientes
END
GO

--3. Listar Habitaciones(combobox)
IF OBJECT_ID('SP_LISTARHABITACIONES_R') IS NOT NULL
    DROP PROC SP_LISTARHABITACIONES_R
GO
CREATE PROC SP_LISTARHABITACIONES_R
AS
BEGIN
    SELECT IDE_HAB, NUM_HAB
    FROM Habitaciones
END
GO


--4.Nuevo Registro (Insertar)
IF OBJECT_ID('SP_NUEVOREGISTRO') IS NOT NULL
    DROP PROC SP_NUEVOREGISTRO
GO
CREATE PROC SP_NUEVOREGISTRO
	@IDE_CLI INT, 
    @IDE_HAB INT,
    @FEN_ALQ DATE,
    @FSA_ALQ DATE
AS
BEGIN
    INSERT INTO Alquileres(IDE_CLI, IDE_HAB, FEN_ALQ, FSA_ALQ)
    VALUES (@IDE_CLI, @IDE_HAB, @FEN_ALQ, @FSA_ALQ)
END
GO

--PRUEBA > SP_NUEVOREGISTRO 2,1, '2023/06/30','2024/07/02';


--5.Actualizar Registro(Modificar)
IF OBJECT_ID('SP_ACTUALIZAREGISTRO') IS NOT NULL
    DROP PROC SP_ACTUALIZAREGISTRO
GO
CREATE PROC SP_ACTUALIZAREGISTRO
	@IDE_ALQ INT,
	@IDE_CLI INT, 
    @IDE_HAB INT,
    @FEN_ALQ DATE,
    @FSA_ALQ DATE
AS
BEGIN
    UPDATE Alquileres
    SET IDE_CLI = @IDE_CLI,
        IDE_HAB = @IDE_HAB,
        FEN_ALQ = @FEN_ALQ,
        FSA_ALQ = @FSA_ALQ
    WHERE IDE_ALQ = @IDE_ALQ
END
GO

--PRUEBA > SP_ACTUALIZAREGISTRO 6,2,1, '2023/06/30','2024/07/10';


--6. Eliminar Registro(Registro)
IF OBJECT_ID('SP_ELIMINARALQUILER') IS NOT NULL
	DROP PROC SP_ELIMINARALQUILER
GO
CREATE PROC SP_ELIMINARALQUILER(@IDE_ALQ INT)
AS
	DELETE Alquileres WHERE IDE_ALQ=@IDE_ALQ
GO

--PRUEBA > SP_ELIMINARALQUILER '6'

